status,issue,title,validator comment 1,validator comment 2,validator comment 3,root cause 1,root cause 2,root cause 3,merged root cause,primary finding,proposed root cause group,,,,
Satisfactory,validation-290,"If an edge or assertion gets slashed, some depositors to the stakingPool will be cheated.",Overdepositing should be prevented as race conditions manifest,`depositBalance` should reflect staker status,Insufficient proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,validation-290,DUPE-AbsBoldStakingPool-001,,,,
Satisfactory,validation-138,Users can create assertion with stale `baseStake` amount,"The first assertion relies on the previous base stake, so the change will be enforced for future assertions","`setBaseStake()` should affect past assertion
 
 seems invalid, new value should not affect existing assertions
 
 relate to 237
 need to double check POC",Users can create assertions with outdated baseStake values,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L182,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L182",validation-138,"DUPE-AssertionStakingPool-001,DUPE-RollupUserLogic-001",DUPE-AssertionStakingPool-001,DUPE-RollupUserLogic-001,,
Satisfactory,validation-369,Griefing Attack Possible Where Validator Will Lose Their Stake,dupe of validation-144 and validation-148,wrong assertionInputs could make other user lose,See #144,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,validation-369,DUPE-AssertionStakingPool-001,,,,
Satisfactory,validation-305,Creating invalid assertion using honest parties' staked funds,dupe of validation-144,"multiple rival edges
 similar to 338",See #144,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,validation-369,DUPE-AssertionStakingPool-001,,,,
Satisfactory,validation-272,Remaining stakers not Refunded,"QA most likely, but will leave","> 50 staker, upgrade lock fund",Insufficient proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L345-L349,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L344-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L344-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L344-L359,validation-168,DUPE-BOLDUpgradeAction-001,,,,
Satisfactory,validation-327,Stakers may not be refunded during rollup upgrade,dupe of validation-272?,"> 50 staker, upgrade lock fund",See #98,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L347-L349,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L344-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341-#L363,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341-L363,validation-168,DUPE-BOLDUpgradeAction-001,,,,
Satisfactory,findings-11,An invalid validator can prevent upgrade by creating an assertion on old Nitro rollup,"While the forceRefundStaker does not check the current challenge in the old rollup impl, it is still susceptible I believe","existing stakers unrefund, block upgrade",Insufficient proof to support the described scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L357,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L357,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L357,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L357,validation-135,DUPE-BOLDUpgradeAction-001,,,,
Satisfactory,validation-171,Old rollup whose count > 50  may lose their stake when upgrading to new rollup,dupe of validation-272?,"> 50 staker, upgrade lock fund",See #98,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L347-L349,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L344-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L344-L359",validation-168,"DUPE-BOLDUpgradeAction-001,DUPE-BOLDUpgradeAction-001",DUPE-BOLDUpgradeAction-001,DUPE-BOLDUpgradeAction-001,,
Satisfactory,validation-275,`cleanupOldRollup()` reverts due to premature out of bounds,"Mitigation is invalid, but I confirmed that one-by-one removal is not correct. It could instead use 0 index",deleteStaker() index mistake,Insufficient proof to support the described scenario with a concrete example,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L350-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341-L363,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341-L363,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341-L363,validation-168,DUPE-BOLDUpgradeAction-001,,,,
Satisfactory,validation-168,Some Stakers Will Be Missed Out During cleanupOldRollup() call,dupe of validation-272?,deleteStaker() index mistake,Insufficient proof to support the described scenario with a concrete example,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L347-L349,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341-L363,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L347-L349,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341-L363,validation-168,DUPE-BOLDUpgradeAction-001,,,,
Satisfactory,validation-135,Malicious user can create a challenge to lock staker fund during upgrade.,maybe dupe of findings-11,"> 50 staker, upgrade lock fund",Report identifies upgrade issue,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341-L363,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L344-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341-L363,validation-135,DUPE-BOLDUpgradeAction-001,,,,
Satisfactory,findings-5,`BOLDUpgradeAction.sol` will fail to upgrade contracts due to error in the `perform` function,dupe of validation-275,"deleteStaker() index mistake

dup of 275",perform function could prevent successful contract upgrades,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L350-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L350-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L350-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L350-L359,findings-5,DUPE-BOLDUpgradeAction-001,,,,
Satisfactory,validation-98,Preventing future upgrade by increasing the number of stakers unlimitedly,"50 limitation, while a problem, would solve the described issue","> 50 staker, upgrade lock fund",Report highlights issue with staker management/handling,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L344-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L341,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L344-L359",validation-168,"DUPE-BOLDUpgradeAction-001,DUPE-BOLDUpgradeAction-001",DUPE-BOLDUpgradeAction-001,DUPE-BOLDUpgradeAction-001,,
Satisfactory,validation-77,BOLDUpgradeAction::cleanupOldRollup will revert whenever there is more than a single staker to refund,dupe of validation-275,"deleteStaker() index mistake
 forceRefundStaker delete an entry from the _stakerList",Loop error causes refund process to fail with multiple stakers,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L350-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L350-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L350-L359,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L350-L359,findings-5,DUPE-BOLDUpgradeAction-001,,,,
Satisfactory,validation-297,L2 sequencer can exploit L3 chains using force inclusion delays,"Very complex, unsure if L3s are a use case",accumulated delay,L2 sequencer can exploit delays to manipulate L3 disputes,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287-L353,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L314,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/ChallengeEdgeLib.sol#L250-L251",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L314,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287-L353,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/ChallengeEdgeLib.sol#L250-L251",validation-297,"DUPE-ChallengeEdgeLib-001,DUPE-SequencerInbox-006",DUPE-ChallengeEdgeLib-001,DUPE-SequencerInbox-006,,
Satisfactory,validation-4,Buffer Depletion Vulnerability in DelayBuffer Library,Cannot be easily validated,need to double check POC,Low QA on limit check,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L33-L63,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L33,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L33,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L33-L63,validation-4,DUPE-DelayBuffer-001,,,,
Satisfactory,validation-147,confirmation timelock grace period is bypassed when the contract is paused and then unpaused,Somewhat related to findings-3,"abuse delay, incorrect ordering of transactions, bypass delay buffer",See #7,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L125,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L33,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L125,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L33,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L125",findings-7,"DUPE-DelayBuffer-001,DUPE-RollupUserLogic-002",DUPE-DelayBuffer-001,DUPE-RollupUserLogic-002,,
Satisfactory,validation-49,Inconsistent sequencer unexpected delay in DelayBuffer may harm users calling forceInclusion(),"Peculiarities in DelayBuffer, unsure of validity",DelayBuffer decrease mechanism,"Inconsistent buffer handling causes unfair delay; valid issue, needs fix.",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L308-L312,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L43,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L90-L98,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L43,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L90-L98,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L308-L312",validation-49,"DUPE-DelayBuffer-001,DUPE-DelayBuffer-002,DUPE-SequencerInbox-006,DUPE-SequencerInbox-006",DUPE-DelayBuffer-001,DUPE-DelayBuffer-002,DUPE-SequencerInbox-006,DUPE-SequencerInbox-006
Satisfactory,findings-4,Staker's funds might be stuck in the rollup contract if `forceCreateAssertion` is used,"The steps in the documentation state that a forceful refund should occur, so perhaps it is handled there",forget to transfer loser assertion stake,Insufficient proof to support the described scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L237-L256,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L237-L256,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L33,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L33,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L237-L256",findings-4,"DUPE-DelayBuffer-001,DUPE-RollupAdminLogic-003",DUPE-DelayBuffer-001,DUPE-RollupAdminLogic-003,,
Satisfactory,validation-340,Participants who didn't deposit into edge challenge manager can still get a refund,"A creation will cause a stake to be provided, and a refund to be due after","should track if each participant has staked or not
 mis group",Report identifies a flaw allowing unstaked participants to receive refunds after re-enabling staking,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L429-L435,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L422-L435,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L429,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L422-L435,validation-132,DUPE-EdgeChallengeManager-001,,,,
Satisfactory,validation-339,An error in the accounting of stake refunds could result in insolvency,Seems correct,"new challange manager deployed during the dispute game, and a new edge created after",Report highlights a critical flaw in stake refund accounting leading to potential insolvency,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L433-L434,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L433-L434,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L433-L434,validation-339,DUPE-EdgeChallengeManager-001,,,,
Satisfactory,validation-132,Upgrades to EdgeChallengeManager changing staking requirement can cause `funds loss`,"Okay, adjustment of stake amounts is definitely insecure, revisit above",impacts of changing stakeToken / stakeAmounts,Changing staking parameters can indeed cause severe fund mismanagement,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L578,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L429,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L580",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L429,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L429,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L580,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L578",validation-132,"DUPE-EdgeChallengeManager-001,DUPE-EdgeChallengeManager-002,DUPE-EdgeChallengeManager-002",DUPE-EdgeChallengeManager-001,DUPE-EdgeChallengeManager-002,DUPE-EdgeChallengeManager-002,
Satisfactory,validation-337,Staked amounts on layer zero edges could be stuck or even lost for honest challengers,,stakeAmounts == 0,Report identifies a critical flaw that could lead to lost or stuck funds,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L580-L582,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L578-L582,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L580-L582,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L578-L582,validation-132,DUPE-EdgeChallengeManager-002,,,,
Satisfactory,validation-237,The adversary validators steal the staked funds in `RollupUserLogic.sol`,validation-132 dupe,"admin `setBaseStake()` affect past/pending assertion
 mis group
 
 relate to 138
 need to double check POC",See #294,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L578,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L223-L226,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L223-L226,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L223-L226,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L578",validation-132,"DUPE-EdgeChallengeManager-002,DUPE-RollupAdminLogic-004",DUPE-EdgeChallengeManager-002,DUPE-RollupAdminLogic-004,,
Satisfactory,validation-100,Wining a challenge by engineering time,seems invalid as system would be configured responsibly,"gap between sending confirmation tx and the time it is mined, delay could pass",Timing exploit allows malicious assertions to win unfairly,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L511,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L511,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L511,validation-100,DUPE-EdgeChallengeManager-003,,,,
Satisfactory,findings-2,Edge from dishonest challenge edge tree can inherit timer from honest tree allowing confirmation of incorrect assertion,dupe of findings-10,"inherit time, different levels of a challenge
relate to 358","Dishonest edges can inherit timers, compromising assertion integrity",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L683-L710,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L520-L531,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L689-L710",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L505-L508,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L683-L710,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L520-L531,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L505-L508",findings-2,"DUPE-EdgeChallengeManager-004,DUPE-EdgeChallengeManagerLib-003,DUPE-EdgeChallengeManagerLib-004",DUPE-EdgeChallengeManager-004,DUPE-EdgeChallengeManagerLib-003,DUPE-EdgeChallengeManagerLib-004,
Satisfactory,validation-291,"An invalid assertion can get confirmed, even when there are honest participants","Difficult to validate, seems plausible","onestep fast confirmation
 need to double check POC
 mis group",That's not how BoLD works. Grace period is always there as the last defense if need be,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L826-L830,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L529",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L826-L830,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L826-L830,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L529",validation-291,"DUPE-EdgeChallengeManagerLib-001,DUPE-EdgeChallengeManagerLib-003",DUPE-EdgeChallengeManagerLib-001,DUPE-EdgeChallengeManagerLib-003,,
Satisfactory,validation-338,incorrect assertion can be confirmed by abusing confirmEdgeByOneStepProof function,Should be invalid,"multiple rival edges
 mis group",That's not how BoLD works,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L796-L833,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L817-L818,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L796-L833,validation-338,DUPE-EdgeChallengeManagerLib-001,,,,
Satisfactory,findings-9,Adversary can force honest party to lose stake to challenge their incorrect edges,Seems plausible,"need to allow confirmed edges to be bisected
multi level edge

relate to 291",See #83,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L608-L610,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L608-L610,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L608-L610",findings-9,"DUPE-EdgeChallengeManagerLib-002,DUPE-RollupAdminLogic-002",DUPE-EdgeChallengeManagerLib-002,DUPE-RollupAdminLogic-002,,
Satisfactory,findings-10,`checkClaimIdLink` does not check `ClaimId`,,"inherit time, different levels of a challenge
relate to 358",Crucial check suggested,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L683-L710,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L520-L531,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L689-L710",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L683-L710,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L683-L710,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L520-L531",findings-2,"DUPE-EdgeChallengeManagerLib-003,DUPE-EdgeChallengeManagerLib-004",DUPE-EdgeChallengeManagerLib-003,DUPE-EdgeChallengeManagerLib-004,,
Satisfactory,validation-292,"Adversary can update his timerCache with his rival's(i.e. honest party's) timer, and maliciously win assertions",maybe dupe of findings-10,"inherit time, different levels of a challenge
 relate to 358",Insufficient proof to support the described scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L698-L700,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L528,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L528,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L528,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L698-L700",findings-2,"DUPE-EdgeChallengeManagerLib-003,DUPE-EdgeChallengeManagerLib-004",DUPE-EdgeChallengeManagerLib-003,DUPE-EdgeChallengeManagerLib-004,,
Satisfactory,findings-6,A flaw in the time confirmation mechanism enables the confirmation of erroneous edges.,dupe of findings-10,"inherit time, different levels of a challenge
relate to 358",Time confirmation flaw allows erroneous edges to be confirmed,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L683-L710,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L520-L531,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L689-L710",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L520-L531,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L683-L710,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L520-L531",findings-2,"DUPE-EdgeChallengeManagerLib-003,DUPE-EdgeChallengeManagerLib-004",DUPE-EdgeChallengeManagerLib-003,DUPE-EdgeChallengeManagerLib-004,,
Satisfactory,validation-194,adversary can win the dispute game in the re-org event,"Seems interesting, rival structure is indeed sequential and could result in issues when a re-org occurs","re-org, first rival of mutual ID will be set UNRIVALED again",Infeasible in Arbitrum as finalizing in L1 cannot be reorged,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L411-L439,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L160-L201,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L411-L439",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L160-L201,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L160-L201,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L411-L439",validation-194,"DUPE-EdgeChallengeManagerLib-005,DUPE-EdgeChallengeManagerLib-006",DUPE-EdgeChallengeManagerLib-005,DUPE-EdgeChallengeManagerLib-006,,
Satisfactory,validation-81,Stakers can create edges with non unique Edge ID's.,"Perhaps uniqueness relates to accepted IDs, but will abstain",2 edges reference the same assertion lead to duplicate edge id,A possible flaw in Edge ID uniquenes,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L47,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L47,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L47,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L47,validation-81,DUPE-EdgeStakingPool-001,,,,
Satisfactory,validation-155,Lack of input validation in edge pool allows malicious user to create a clearly invalid insertion to make staker lose fund.,Somewhat related to validation-144,"wrong hash can guarantee staker's loss
 but it's staker's own choice to assert",Report identifies a critical input validation vulnerability,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,validation-369,DUPE-EdgeStakingPool-001,,,,
Satisfactory,findings-13,Incorrect check in `requireInactiveStaker` allows validators to withdraw their stakes for pending assertions,"Hmm, this is interesting, perhaps one of the children should be validated? related to several above","create new child assertion to withdraw
similar to 338",Low QA frequently reported by bots,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L572-L573,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L572-L573,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/interfaces/IEdgeStakingPoolCreator.sol#L24,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/interfaces/IEdgeStakingPoolCreator.sol#L24,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L572-L573",findings-13,"DUPE-IEdgeStakingPoolCreator-001,DUPE-RollupCore-002",DUPE-IEdgeStakingPoolCreator-001,DUPE-RollupCore-002,,
Satisfactory,validation-133,Upgrades to EdgeChallengeManager using setChallengeManager can allow to confirm bad assertion,Complex to validate,"exploit changemanager
 mis group",ECM upgrades can enable confirmation of unchallenged bad assertions,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L326-L329,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L326-L329,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L326-L329,validation-133,DUPE-RollupAdminLogic-001,,,,
Satisfactory,findings-7,The time spent paused is incremented in the rollup's timing for assertion validation.,Probably administrator mistake,"timer during pause mode
relate to 119, 343",Non-implemented logic per function NatSpec,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L109-L110,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L145,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L60,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L71-L75",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L145,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L145,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L60,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L71-L75,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L109-L110",findings-7,"DUPE-RollupAdminLogic-002,DUPE-RollupUserLogic-008,DUPE-RollupUserLogic-009,DUPE-RollupUserLogic-010",DUPE-RollupAdminLogic-002,DUPE-RollupUserLogic-008,DUPE-RollupUserLogic-009,DUPE-RollupUserLogic-010
Satisfactory,validation-343,"`removeWhitelistAfterFork` and  `removeWhitelistAfterValidatorAfk` can be called when contract is paused, disabling whitelist mechanism",dupe of findings-3,"during `paused` state, the 2 func should not be available",Inadequate/incorrect proof to upend an intended design,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L60,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L62-L75,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L143-L161,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L62-L75,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L60,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L143-L161",findings-3,"DUPE-RollupAdminLogic-002,DUPE-RollupUserLogic-008,DUPE-RollupUserLogic-009",DUPE-RollupAdminLogic-002,DUPE-RollupUserLogic-008,DUPE-RollupUserLogic-009,
Satisfactory,findings-3,Validator AFK timer is ticking even when the rollup contract is paused,Pretty good one!,"timer during pause mode
relate to 119, 343",Intended design. Low QA,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L60,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L145,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L60,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L71-L75",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L60,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L145,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L60,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L71-L75",findings-3,"DUPE-RollupAdminLogic-005,DUPE-RollupUserLogic-008,DUPE-RollupUserLogic-009",DUPE-RollupAdminLogic-005,DUPE-RollupUserLogic-008,DUPE-RollupUserLogic-009,
Satisfactory,validation-288,`sequencerBatchAcc` has an incorrect value in `RollupCore`,Difficult to validate,use afterInboxPosition for currentInboxPosition,Insufficient proof to support the described scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L471,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L471,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L471,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L471,validation-288,DUPE-RollupCore-001,,,,
Satisfactory,validation-361,Withdrawals can be delayed in some conditions,penalty of the final assertion that is not validated should be reflected,"stakes on a new assertion for a prevAssertion to delay other withdrawal
 relate to 313",Insufficient proof to support the described scenario with a concrete example,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L565-L574,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L565-L574,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L565-L574,validation-361,DUPE-RollupCore-002,,,,
Satisfactory,validation-235,A malicious validator can avoid loss his money doing bad assertions,"I believe it behaves as expected, similar to validation-361",avoid losing if having child,See #294,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L572-L573,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L572,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L572-L573,validation-235,DUPE-RollupCore-002,,,,
Satisfactory,validation-335,Two correct assertion chains could possibly happen which breaks a core invariant in BoLD,Seems valid,"anyTrustFastConfirmer could generate 2 confirmed assertion
 mis group",That's not how BoLD works,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L247-L261,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L236,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L236,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L236,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L247-L261",validation-335,"DUPE-RollupCore-003,DUPE-RollupUserLogic-006",DUPE-RollupCore-003,DUPE-RollupUserLogic-006,,
Satisfactory,findings-8,Adversary can make honest parties unable to retrieve their assertion stakes if the required amount is decreased,required stake cannot be mutated,"admin change required stake amount, old and new amounts could mix to cause error

relate to 237",Malicious actors can exploit stake updates to cause insolvency,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L177-L182,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L180,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L180,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L177-L182,validation-132,DUPE-RollupUserLogic-001,,,,
Satisfactory,validation-283,Upgrades to EdgeChallengeManager could `DoS the assertion chain` temporarily until admin unstuck it by forcing assertion,"Upgrade related, can be argued",upgrade temporarily DOS assertion,ECM upgrades could temporarily stall assertion chain until resolved,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L117,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L115-L128,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L115-L128,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L115-L128,validation-283,DUPE-RollupUserLogic-002,,,,
Satisfactory,validation-287,confirmAssertin() can be DOSed.,can simply re-invoke,allow posting rival after delay period,Malicious front-running can deny service to honest validators,,https://github.com/code-423n4/bold/blob/main/contracts/src/rollup/RollupUserLogic.sol#L115-L128,https://github.com/code-423n4/bold/blob/main/contracts/src/rollup/RollupUserLogic.sol#L115,https://github.com/code-423n4/bold/blob/main/contracts/src/rollup/RollupUserLogic.sol#L115-L128,validation-287,DUPE-RollupUserLogic-003,,,,
Satisfactory,validation-286,The staker that lost the challenge dispute game can still withdraw his stake,Plausible,"can withdraw if having child
 relate to 235
 relate to 338",See #294,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L216,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358-L364",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L216,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358-L364,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L216",validation-235,"DUPE-RollupUserLogic-004,DUPE-RollupUserLogic-005",DUPE-RollupUserLogic-004,DUPE-RollupUserLogic-005,,
Satisfactory,validation-261,`newStakeOnNewAssertion(...)` will revert due wrong logic implementation in `RollupUserLogic` contract,,`stakeOnNewAssertion` should be after `receiveTokens`,Reorder token transfers to prevent DoS issue,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L339-L341,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L216,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L216,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L339-L341",validation-261,"DUPE-RollupUserLogic-005,DUPE-RollupUserLogic-007",DUPE-RollupUserLogic-005,DUPE-RollupUserLogic-007,,
Satisfactory,validation-226,Logical flaw in `_setBufferConfig` function that can lead to unexpected behavior and potentially incorrect state updates.,QA,,Recommended fix prevents unexpected state updates effectively,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L851-L856,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L851-L856,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L851-L856,validation-226,DUPE-SequencerInbox-001,,,,
Satisfactory,validation-59,"`SequencerInbox::_setBufferConfig()` changes the parameters if not all delayed messages were read, leading to different past buffer delay",I believe code handles things appropriately,"setter affect past users
 relate to 237",Changing buffer parameters retroactively affects delayed message handling,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L847,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L847,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L847,validation-59,DUPE-SequencerInbox-002,,,,
Satisfactory,validation-166,the blobGas is been refunded twice in `addSequencerL2BatchFromBlobs` functions,perhaps two types of refunds,"`blobGas` refunded twice
 mis group",addSequencerL2BatchFromBlobsImpl is an internal devoid of refundsGas modifier,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L508,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L508,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L508,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L508,validation-166,DUPE-SequencerInbox-003,,,,
Satisfactory,findings-12,Wrong usage of origin checking in sequence inbox,Uses different gas refund mechanism (refundsGas),pass in hardcode parameter value,Batch posters' gas fees reimbursement condition incorrectly handled,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L577,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L601","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L577,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L601",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L577,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L577,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L601",findings-12,"DUPE-SequencerInbox-004,DUPE-SequencerInbox-005",DUPE-SequencerInbox-004,DUPE-SequencerInbox-005,,
Unsatisfactory,validation-8,Missing return in `mostSignificantBit` function,msb is a named return variable,misunderstanding of named return,It's named return,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/UintUtilsLib.sol#L29,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/UintUtilsLib.sol#L29,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/UintUtilsLib.sol#L29,,,,,,
Unsatisfactory,validation-311,"SetConfirmPeriodBlocks must used the ""whenPaused"" modifier","insufficient elaboration, does not appear to have an issue at brief glance",admin setter need `whenPaused`,"Could possibly lead to assertion hash incompatibilities, but report lacks burden of proof",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L277-L284,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L213,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L213,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L281","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L213-L213,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L277-L284",,,,,,
Unsatisfactory,validation-310,SetWasmModuleRoot must add the modifier whenPaused,dupe of 311,admin setter need `whenPaused`,"Could possibly lead to assertion hash incompatibilities, but report lacks burden of proof",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L277-L284,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L281,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L213,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L281","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L277-L284,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L213",,,,,,
Unsatisfactory,validation-301,amount zero transfer,Does not need to be validated at this point without additional context,no detailed POC,Low QA,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L366-L368,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L366,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L366-L368,,,,,,
Unsatisfactory,validation-220,Lack of Assertion Hash Calculation,Test code,out of scope,Out of scope contract,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/test/MockAssertionChain.sol#L89-L102,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/test/MockAssertionChain.sol#L89-L102,,,,,,
Unsatisfactory,validation-79,Lack of Access Control in Withdrawals (AbsBoldStakingPool.sol),"A public variable cannot be ""compromised""",withdrawl Access Control,msg.sender linked should suffice,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,,,,,,
Unsatisfactory,validation-58,Potential Reentrancy in `addSequencerL2BatchImpl` Function,Bridge interaction is known and non-reentrant,"reenter
 mis group",Insufficient proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L809-L816,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L791,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L809-L816","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L791,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L809-L816",,,,,,
Unsatisfactory,validation-150,Bold upgrade action can revert due to predicable rollup address,A user cannot deploy on an address that is known if they are not the deployer,the addr can only be created by this contract,The adopted create2 is more deterministic than the suggested create,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L496-L501,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L498-L504,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L498-L504,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L496-L504,,,,,,
Unsatisfactory,validation-386,Re-org attack in some functions,"CREATE2 deployments are not susceptible to block re-orgs, and the `salt` syntax effectively uses them",re-org,Infeasible in Arbitrum as finalizing in L1 cannot be reorged,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L516-L517,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L15-L22",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L15-L22,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L516-L517,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L15-L22",,,,,,
Unsatisfactory,validation-255,Unauthorized Rollup Creation via createRollup Function,"I am not sure if rollups should require ACL, will revisit ","access control of `createRollup()`
 intended behavior",Insufficient proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L137-L141,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L137,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L137-L141,,,,,,
Unsatisfactory,validation-31,"[H-4] `RollupAdmin::initialize`- Initialize function can be called multiple times by anyone, allowing attackers to reset the contract with their own parameters over and over again.","Invalid, references interface",it has the initializer modifier,Typically taken care of via deployment script,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45",,,,,,
Unsatisfactory,validation-259,Restricting Access to `createBridge` Function,"I am not sure if bridges should require ACL, will revisit",access control createBrige,Insufficient proof. The contract is simply a creator,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L99-L128,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L99,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L99-L128,,,,,,
Unsatisfactory,validation-258,Attacker can steal funds from the stakers,No ACL at all on RollupAdminLogic? - its a facet,logic contract access control,POC lacking in detailed proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L269-L275,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L269-L275,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L269-L275,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L269-L275,,,,,,
Unsatisfactory,validation-131,Re-initialization Vulnerability in Upgradeable Contract,Re-initialization is prevented,logic contract access control,Typically taken care of via deployment script,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177-L205,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177-L205,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45",,,,,,
Unsatisfactory,validation-83,Unauthorized Access in `fastConfirmNewAssertion` Function,ACL is validated by the function invoked within it,"logical contract func do not need access control, Rollup user",Same as stakeOnNewAssertion needing no staker checks,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L273-L306,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L273,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L273,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L273-L306,,,,,,
Unsatisfactory,validation-263,malicious user can create false assertion without losing stake,No ACL at all on RollupAdminLogic? - its a facet,"logical contract func do not need access control
 dup of 172","Meant for assertions, NOT challenges",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L219-L226,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L223-L226,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,,,,,,
Unsatisfactory,validation-253,Unauthorized Access to Rollup Migration via perform Function,"There should be no risk on who performs, but why is there an argument?",access control of `perform()`,Call would revert when cleanupOldRollup() is triggered,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L464-L541,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L464,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L464,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L464-L541,,,,,,
Unsatisfactory,validation-45,Inconsistent Access of `validatorWhitelistDisabled` in `EdgeChallengeManager.sol`,A public function has an automatic getter generated,public variable has getter(),It's simply name shadowing,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L374,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L374,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L108","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L374,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L108",,,,,,
Unsatisfactory,validation-348,"Lack of Reentrancy Guard, Funds Drain",Initializations are non-reentrant,reenter,Generic description with no actual scenario given,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L99-L128,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L98-L128,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L98-L128,,,,,,
Unsatisfactory,validation-260,Whitelist validator functionality is flawed,A whitelist for validators means they are known and thus two validators are unique,intended behavior,Insufficient proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L432-L435,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L376,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L435,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L432-L435,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L376",,,,,,
Unsatisfactory,validation-41,Race Condition in `SequencerInbox`'s `_setBufferConfig` Function,Misunderstanding of how local function calls work,arbitrum does not have race condition,No race condition; atomic transaction ensures consistency.,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L847-L865,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L847-L865,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L115-L121","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L847-L865,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L115-L121",,,,,,
Unsatisfactory,validation-40,[M-3] `RollupUserLogic::withdrawStakerFunds` - Lack of Minimum Withdrawal Amount can lead to Potential DoS and Gas Inefficiency,Full amount is withdrawn,,Caller suffers from gases spent. No loss of protocol funds entailed. Low QA,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358-L364,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L358-L364,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L316-L342","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L358-L364,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L316-L342,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358-L364",,,,,,
Unsatisfactory,validation-39,[M-2] `RollupUserLogic::newStakeOnNewAssertion` - Lack of Minimum Deposit Amount can lead to Potential DoS and Accounting Issues,Minimum deposit validated by downstream stakeOnNewAssertion function,,Caller suffers from gases spent. No loss of protocol funds entailed. Low QA,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L312-L342,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L358-L364,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L316-L342","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L358-L364,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L316-L342,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L312-L342",,,,,,
Unsatisfactory,findings-15,Undesirable behaviour in the event of a fork immediately after BOLD upgrade,Intended behaviour,"edge case, need to add _validatorIsAfk() check",Fork handling logic appropriately lacks AFK check requirement,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L62-L66,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L62-L66,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L62,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L62-L66,,,,,,
Unsatisfactory,validation-276,`BOLDUpgradeAction` breaks the Arbitrum GAC standard,Could be valid if the action is meant to be a GAC,"func does not follow doc
 not significant loss",Insufficient proof alleging the violation,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L464,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L464,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L464,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L464,,,,,,
Unsatisfactory,validation-44,Missing Implementation of Functions in the Arbitrum `Rollup` Contracts those that implements `IAssertionChain`,Inheritence recommendation?,"miss impl, no specific impact",Insufficient proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupCore.sol#L56,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupCore.sol#L56,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupCore.sol#L56,,,,,,
Unsatisfactory,validation-28,"[H-1] `EdgeChallengeManager::initialize`- Initialize function can be called multiple times by anyone, allowing attackers to reset the contract with their own parameters over and over again.","Invalid, references interface","miss initializer modifier
 it has",Typically taken care of via deployment script,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45",,,,,,
Unsatisfactory,validation-21,Incorrect Array Access Syntax in `EdgeStakingPool.sol`,Its a public variable so has a function,public variable has getter(),Perfectly ok as the array is a public getter,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L45,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L45","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L45",,,,,,
Unsatisfactory,validation-380,Non-Unique Salt Value in createPool Function,Intended behaviour,"createPool uses const salt
 relate to 333",Low QA without added context given,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22",,,,,,
Unsatisfactory,validation-329,Checks that ensure the call is from EOA might not hold true in near future,Seems plausible in some instances,"msg.sender == tx.origin
 maybe QA, contract is good for now",Analyzer: L1 and L6,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L375,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L440,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L507,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L764,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L28",,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L375,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L375,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L440,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L507,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L764,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L28",,,,,,
Unsatisfactory,validation-281,Complete Break of RollupAdminLogic Contract as no Validation is Present for all Functions,No ACL at all on RollupAdminLogic? - its a facet,owner is compromised,Only when there's a single point of failure. QA at best,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L158,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L166,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L171,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L180,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L195,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L204,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L213,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L223,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L228,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L109",,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L109,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L158,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L166,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L171,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L180,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L195,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L204,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L213,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L223,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L228,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L109",,,,,,
Unsatisfactory,validation-151,`forceInclusion()` can be called earlier than delay period.,The block is sufficient to prevent this,"line 314 has the check
 mis group",missing timestamp check allows premature message processing in forceInclusion(),https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L313-L314,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287-L353,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287-L353,,,,,,
Unsatisfactory,validation-30,"[H-3] `ISequencerInbox::initialize` - Initialize function can be called multiple times by anyone, allowing attackers to reset the contract with their own parameters over and over again.","Invalid, references interface",first 2 lines are the check,Typically taken care of via deployment script,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/ISequencerInbox.sol?plain=1#L287-L291,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/ISequencerInbox.sol?plain=1#L287-L291,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/ISequencerInbox.sol?plain=1#L287-L291",,,,,,
Unsatisfactory,validation-236,Exploitable Address Collision Vulnerability in `StakingPoolCreatorUtils`Library,The library is a utility library and not used for any sensitive purpose,addr collision,Inadequate elaboration as elicited in #115,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L13-L21,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L13-L21",,,,,,
Unsatisfactory,validation-126," ""Handling Indexing Realignment in the deleteStaker Function",Data points will simply be empty if the last element is removed,"deleteStaker() index mistake
 dup of 275",Insufficient proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L355-L363,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L355-L363,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L217-L219,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L217-L219,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L355-L363",,,,,,
Unsatisfactory,validation-89,Reentrancy Attack Exploiting Low-Level Call in Sequencer Contract (Out-of-Scope),"One references a mock, the other is too generic",reenter,See #348,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/Bridge.sol#L42-L49,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/Bridge.sol#L42-L49,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/Bridge.sol#L42-L49,,,,,,
Unsatisfactory,validation-14,Reentrancy atack in `withdrawStaker` function,No external call,reenter,See #348,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L317-L324,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L317,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L317-L324,,,,,,
Unsatisfactory,validation-353,Protocol hardcodes block minting time even if contracts are to deploy on other chains,Not all contracts will be deployed on ETH,,Hardcoded block time affects cross-chain protocol consistency,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L49,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L48-L51,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L48-L51,,,,,,
Unsatisfactory,validation-43,Incorrect Access Control in `EdgeChallengeManager.sol` `isValidator`,"Invalid, public variable",,See #45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L376-L378,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L376-L378,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L376-L378,,,,,,
Unsatisfactory,validation-377,EdgeStakingPool.sol:: Token Contract Manipulation Vulnerability in the function createEdge(),,"malicious challengeManager contract
 mis group",Checks have been in place,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,,,,,,
Unsatisfactory,validation-365,Insufficient Validation of `stakeAmounts` Non-Zero Values,,stakeAmounts == 0,Zero value check. Low QA,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L34-L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L578-L582,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L34,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L34-L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L578-L582",,,,,,
Unsatisfactory,validation-252,`setOwner` Function Missing onlyRollupOwner Modifier,No ACL at all on RollupAdminLogic? - its a facet,logical contract func do not need access control,Function NatSpec: it is expected that only the rollup admin can use this facet to set a new owner,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L195,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L195,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L195,,,,,,
Unsatisfactory,validation-125,Logical Oversight in Buffer Configuration Function,only-delegated & only-proxy-owner,no detailed POC,Insufficient proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L161-L175,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L161-L175,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L161-L175,,,,,,
Unsatisfactory,validation-117,Possible front-running griefing attack on `getPool()`,The library is a utility library and not used for any sensitive purpose,addr collision,Low QA without added context given,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L13-L21,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L13-L21",,,,,,
Unsatisfactory,validation-124,Logical Flaw Leading to Inconsistent Buffer Configuration,QA,no detailed POC,See #125,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L851-L856,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L947-L950,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L947-L950,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L851-L856",,,,,,
Unsatisfactory,validation-113,Reentrancy Risk in Transactions of Staking Pool,Malicious,reenter,See #348,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L15-L30,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L15-L30,,,,,,
Unsatisfactory,validation-112,"Lack of Access Control in ""src/rollup/RollupUserLogic.sol""","Invalid code, invalid submission?",group to 140,See #83,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L75,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L75,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L51-L75,,,,,,
Unsatisfactory,validation-104,divide-before-multiply  : src/libraries/GasRefundEnabled.sol#L17-L51,Desirable,,Invalid instances entailed,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L17-L51,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L17-L51,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L17-L51,,,,,,
Unsatisfactory,validation-64,[M-11] `AbsBoldStakingPool::withdrawFromPool` - Missing Minimum Withdrawal Amount Can Lead To A Denial Of Service And Network Congestion,No DoS would result,"0 withdraw amount check, no loss",See #40 and #39,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol?plain=1#L41-L54,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol?plain=1#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol?plain=1#L41-L54,,,,,,
Unsatisfactory,validation-347,"If both validator's and challenger's assertion is not honest, the wrong assertion can be confirmed with a winner getting back the bond",Cannot be easily validated,dishonest validator and challenger collude,There will always be an honest winner,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L216,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L218,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L218,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L218,,,,,,
Unsatisfactory,validation-282,"When the validator whitelist is enabled, previous validators will be unable to withdraw their stake",Invalid as whitelist can only be disabled and cannot be re-enabled,"toggle validatorWhitelistDisabled lock fund
 mis group",Require check works as intended/suggested by the mitigation,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L222-L225,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L241-L245,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358-L364",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L20-L23,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L20-L23,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L222-L225,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L241-L245,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358-L364,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L20-L23",,,,,,
Unsatisfactory,validation-47,[M-4] `RollupCreator::createRollup` - Lack of Address Existence Verification (Unchecked External Calls) can lead to Unexpected Behavior and Exploits,,,No low level call entailed justifying such check,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol?plain=1#L137-L265,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol?plain=1#L137-L265,,,,,,
Unsatisfactory,validation-296,`fastConfirmAssertion()` can be front-runned and the tx will potentially revert,Probably already has custody of funds?,"logical contract func do not need access control, Rollup user",Lacking concrete proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L288-L297,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L273,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L295,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L288-L297,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L273",,,,,,
Unsatisfactory,validation-120,`EdgeStakingPoolCreator.createPool` can be grieved,Create2 is used,createPool uses constant salt.,See #195,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22,,,,,,
Unsatisfactory,validation-63,[M-10] `AbsBoldStakingPool::depositIntoPool` Missing Minimum Deposit Amount Can Lead To Denial Of Service and Network Congestion,Invalid,"0 withdraw amount check, no loss",See #40 and #39,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol?plain=1#L29-L38,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol?plain=1#L29-L38,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol?plain=1#L29-L38,,,,,,
Unsatisfactory,validation-46,[H-7] `RollupCreator::createRollup` - Absence of Policy Against Delegate Calls to Untrusted Contracts (Lack of Input Validation) can lead to Unauthorized Access and State Manipulation,No delegate calls are done?,,Low QA on input validation,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol?plain=1#L137-L265,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol?plain=1#L137-L265,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol?plain=1#L137-L265,,,,,,
Unsatisfactory,validation-26,Missing Implementation of `IAssertionChain` Interface in Arbitrum Foundation Project,"Random links, the interface is inherited by another","miss impl, no specific impact",Insufficient proof,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L305-L316,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L305-L316,,,,,,
Unsatisfactory,validation-17,Contracts are vulnerable to fee-on-transfer accounting-related issues,OOS,fee on transfer is not supported,Known issue from readme,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L312-L312,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L312-L312,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L312-L312,,,,,,
Unsatisfactory,validation-9,Most critical functions in RollupAdminLogic.sol lack access control,No ACL at all on RollupAdminLogic? - its a facet,logic contract access control,See #83,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150,,,,,,
Unsatisfactory,validation-360,RollupAdminLogic : anyone can call the `pause()` and `resume()`,No ACL at all on RollupAdminLogic? - its a facet,"logical contract func do not need access control
 group to 172",See #83,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150-L161,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,,,,,,
Unsatisfactory,validation-350,`RollupUserLogic#newStakeOnNewAssertion()` does not function as expected,Stake token is EIP-20 per contest page,"cannot receive ETH
 not following doc",Intended design. WETH likely to be used,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L331-L342,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L331-L343,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L331-L343,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L331-L343,,,,,,
Unsatisfactory,validation-268,Wrong TotalTimeUnrivaled Implementation when Edges Upper ChildId is not Zero,They are configured together to non-zero values,upperChildId should be checked,No concrete proof given,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L490,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L490,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L490,,,,,,
Unsatisfactory,validation-238,Possible Front-Running Attack on Edge Confirmation,I do not see any fund loss from front-running,,"Lacking concrete/structured proof, but expected scenario",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L511-L536,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L511-L536,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L511-L536,,,,,,
Unsatisfactory,validation-279,`forceInclusion` and `forceInclusionDeadline`  potential manipulation by miners,Invalid manipulation,gpt report,"Lacking concrete/structured proof, but expected scenario",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287C1-L354C1,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287C1-L354C1,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287C1-L354C1,,,,,,
Unsatisfactory,validation-278,`EdgeStakingPoolCreator ` is vulnerable to address collision,Desirable,createPool uses constant salt.,See #195,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L15-L22,,,,,,
Unsatisfactory,validation-267,"Unchecked Transfer in the refundStake function,",Checked at lib,safeTransfer return value,Low QA commonly reported by bots,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L571C1-L586C1,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L571-L586,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L571C1-L586C1,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L571C1-L586C1,,,,,,
Unsatisfactory,validation-55,[H-12] `RollupAdminLogic` - Insufficient Access Control Can Lead To Unauthorized Changes By Attackers,No ACL at all on RollupAdminLogic? - its a facet,logical contract func do not need access control,See #83,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol?plain=1#L117-L141,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol?plain=1#L117-L141,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol?plain=1#L117-L141",,,,,,
Unsatisfactory,validation-48,[H-8] `RollupUserLogic::newStakeOnNewAssertion` - Inconsistent Usage of Check-Effect-Interaction Pattern (Reentrancy Vulnerability) can lead to Fund Manipulation and Unauthorized Actions,Adheres to CEI,reenter,See #348,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L331-L342,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L331-L342,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L331-L342,,,,,,
Unsatisfactory,validation-352,The timer cache in `EdgeChallengeManagerLib` at a time would become unsettable,Unrealistic for time to exceed that value,,Low QA,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L502-L514,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L502-L515,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L502-L515,,,,,,
Unsatisfactory,validation-289,Missing Zero Withdrawal Check in `withdrawFromPool()` Function,A zero check exists in the withdrawFromPool func,"0 withdraw amount check, no loss",Low QA on zero value check,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L57-L59,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L57-L59,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L57-L59,,,,,,
Unsatisfactory,validation-69,[H-13] `EdgeChallengeManager`: Contract code size exceeds the limit of 24576 bytes and may not be deployable on Mainnet,"Too generic, I doubt this is the case ",no big loss,Low QA,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L206,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L206-L675,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L206-L675,,,,,,
Unsatisfactory,validation-62,[M-9] `MerkleTreeLib::root` Lack of Overflow Checks can lead to Overflows and unexpected behavior,"They are hashed in sequence, not accumulated","merkle overflow, misunderstanding of merkle process",SafeMath already available in Solidity 8,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L110-L140,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L110-L140,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L110-L140,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L110-L140,,,,,,
Unsatisfactory,validation-22,Unsafe Usage of `SafeERC20` Library: Missing Argument in `safeIncreaseAllowance`,Uses using SafeERC20 for IERC20 syntax,SafeERC20,Insufficient proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L46,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L12,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L12,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L46",,,,,,
Unsatisfactory,validation-333,createPool in EdgeStakingPoolCreator is suspicious of the reorg attack,Uses CREATE2,re-org,Infeasible in Arbitrum as finalizing in L1 cannot be reorged,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L565-L574,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L565-L574,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19",,,,,,
Unsatisfactory,validation-80,Incorrect Contract Instantiation and Function Call in EdgeStakingPool,Its an interface cast,public variable has getter(),See #21,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L45,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L45,,,,,,
Unsatisfactory,validation-74,[H-14] `StakingPoolCreatorUtils::getPool` - Use of `abi.encodePacked()` with dynamic types can lead to Hash Collisions and Unintended Contract Creation,Util contract based on its usage,addr collision,Analyzer: L5,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol?plain=1#L14,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol?plain=1#L14,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol?plain=1#L14,,,,,,
Unsatisfactory,validation-38,Race Condition in `SequencerInbox`'s `isDelayProofRequired` Function,Concurrent invocation is impossible,arbitrum does not have race condition,See #41,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L628-L635,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L628-L635,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L628-L635,,,,,,
Unsatisfactory,validation-293,DOS in AbsBoldStakingPool (),Expected Behaviour,not significant loss,Intended design. Expected scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/bold/blob/main/contracts/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/bold/blob/main/contracts/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,"https://github.com/code-423n4/bold/blob/main/contracts/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54",,,,,,
Unsatisfactory,validation-128,Vulnerability in Sequence Number Validation Leading to Control Flow Manipulation,Desirable Flag,"sequenceNumber == ~uint256(0)
 intended behavior",Insufficient proof,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L409-L427,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L409-L427,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L409-L427,,,,,,
Unsatisfactory,validation-76,Unauthorized Access in `createEdge` Function Allows Arbitrary Edge Creation and Stake Manipulation,"This is valid, and related to the usage of funds of other users but may be insufficiently elaborated. Unsatisfactory due to not being able to pinpoint flaw properly",access control to createEdge,Meant for anyone creating a challenge,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,,,,,,
Unsatisfactory,validation-72,Failed Contract Deployment Handling in Staking Pool Creator Contracts,Failure to deploy would result in transaction reverting,,Suggested check has been well in place,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L13-L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L13-L22,,,,,,
Unsatisfactory,validation-71,Potential Reversion Issue in createEdge Function When Edge is Already Created,"Multiple edge creations potentially desirable, will revisit, not a problem by itself",,Insufficient proof to support the described scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L52,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L52,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L52,,,,,,
Unsatisfactory,validation-53,[M-6] `RollupCreator::createRollup` - Lack of Validation on Input Data Size (Unintended Memory Access) can lead to Disruption of Protocol Functionality,No low level interactions,,See #46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol?plain=1#L137-L265,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol?plain=1#L137-L265,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol?plain=1#L137-L265,,,,,,
Unsatisfactory,validation-37,Race Condition in `DelayBuffer`'s `isUpdatable` Function,Concurrent mutation is impossible,arbitrum does not have race condition,See #41,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L108-L113,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L108-L113,,,,,,
Unsatisfactory,validation-277,Minimum Assertion Period is Wrongly Set During Initialization,Is in blocks,"wrong init value, no big loss",Can be easily rectified via setMinimumAssertionPeriod(),https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L51-L52,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L51-L52,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L51-L52,,,,,,
Unsatisfactory,validation-119,Assertions can take longer than ~14 days to confirm,"Close to findings-3, but not precisely. It could be considered a documentation issue vs. the AFK threshold, as a pause state is not a normal course of operation","pause can delay 14 day window
 mis group",Insufficient proof to support the described scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L82-L89,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L82-L89,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L82-L89,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L82-L89,,,,,,
Unsatisfactory,validation-107,incorrect-equality : 3 occurences,Non-descript,no detailed POC,Insufficient proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L957-L961,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L957-L961,,,,,,
Unsatisfactory,validation-295,Assertions that result in machineStatus.ERRORED are not marked as overflown. As a result there will be a period where only invalid assertions can be submitted and honest user transactions will revert.,Expected behaviour per documentation,"MachineStatus and multiple condition check, result in special period gap",Intended check currently works well,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L429-L434,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L429-L434,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L429,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L429-L434,,,,,,
Unsatisfactory,validation-160,modifier onlyRollupOwnerOrBatchPosterManager() is incorrect,Invalid,&& or ||,Intended check currently works well,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L108-L113,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L108,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L108,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L108-L113,,,,,,
Unsatisfactory,validation-93,isUpdateable() will return true if one of the cases are true.,"Depleted is a downward updating action, replenished is an upward updating action",|| or &&,Intended check currently works well,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L112,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L112,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L112,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L112,,,,,,
Unsatisfactory,validation-67,[M-12] `AssertionStakingPool::withdrawStakeBackIntoPool` - Ignores the return value of the `withdrawStakerFunds()` function call and can lead to Contract Inconsistencies,Can be ignored,return value of `withdrawStakerFunds()`,Inconsequential as safeTransfer() is entailed,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol?plain=1#L55-L57,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol?plain=1#L55-L57,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol?plain=1#L55-L57,,,,,,
Unsatisfactory,validation-56,[M-7] `RollupAdminLogic::forceRefundStaker` - Unbounded Loop Leads To Denial-of-Service and High Gas Cost,Atomic function with input array,,Low QA. Array input is caller controlled,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol?plain=1#L228-L235,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol?plain=1#L228-L235,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol?plain=1#L228-L235,,,,,,
Unsatisfactory,validation-11,Ethereum Mainnet Deployment Limit Violation: Optimizing Bytecode Size for EdgeChallengeManager Contract,"Too generic, I doubt this is the case ",no big loss,See #69,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L206,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L206,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L206,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L206",,,,,,
Unsatisfactory,validation-382,AssertionStakingPoolCreator.getPool() is vulnerable to address collission,The library is a utility library and not used for any sensitive purpose,addr collision,See #115,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L13-L21,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L19","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L13-L21",,,,,,
Unsatisfactory,validation-379,Excessive Privilege in Function removeDelayAfterFork(),A change of chain ID is the authentication,logic contract access control,Meant for removing force inclusion delay after a L1 chainId fork,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L236-L242,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L236-L242,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L236-L242,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L236-L242,,,,,,
Unsatisfactory,validation-172,most functions in contract  `RollupAdminLogic` don't have access control,No ACL at all on RollupAdminLogic? - its a facet,logical contract func do not need access control,See #83,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,,,,,,
Unsatisfactory,validation-57,[M-8] `MerkleTreeLib::verifyPrefixProof` - Unbounded Loop can lead to a DoS,Insufficient elaboration,merkle size too large gas DOS,Loop size is caller controlled,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L332-L342,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L332-L342,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L332-L342,,,,,,
Unsatisfactory,validation-384,Anyone can call admin functions in RollupAdminLogic.sol,No ACL at all on RollupAdminLogic? - its a facet,logical contract func do not need access control,See #83,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150-L153,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L18-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L18-L330,,,,,,
Unsatisfactory,validation-356,Using block.number as a time reference may be subjected to change if Ethereum upgrades,Hypotheticals,block time could change,Intended design. Low QA,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L109-L127,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L109-L127,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L109-L127,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L109-L127,,,,,,
Unsatisfactory,validation-182,Incorrect Assertion Hash Verification in `validateAssertionHash()` Function.,It will hash the full `state` so works properly,,state.afterState does not exist,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L546,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L540-L547,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L540-L547,,,,,,
Unsatisfactory,validation-180,Unauthorized Access Vulnerability in `refundStake` Function.,I do not think absence of ACL is important here,,setRefunded() will revert if edge.status != EdgeStatus.Confirmed,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L572-L585,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L572-L585,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L572-L585,,,,,,
Unsatisfactory,validation-94,Staking token transfer to the `loserStakeEscrow` after assertions will fail when the RollupUserLogic contract holds less or no stake tokens at all,Uses funds already acquired,`stakeOnNewAssertion` should be after `receiveTokens`,Insufficient proof to support the described scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L216,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L339-L341,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L45,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L339-L341,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L216,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L45",,,,,,
Unsatisfactory,validation-36,"Inconsistent Instantiation and initialization following the statement `using SafeERC20 for IERC20;`, Inconsistent Allocating Correct Argument Usage in safeIncreaseAllowance Function Call",,SafeERC20,Insufficient proof,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L43,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L43,,,,,,
Unsatisfactory,validation-371,Potential Theft of Funds Due to Static Salt in Contract Creation During Reorgs,,re-org,Infeasible in Arbitrum as finalizing in L1 cannot be reorged,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,,,,,,
Unsatisfactory,validation-358,"Adversary can submit two different complimentary wrong assertions, preventing an honest assertion from getting confirmed.","Edges need to be bisected until two remain, so more than 3 can exist","multiple rival edges
 similar idea as 338",That's not how BoLD works,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L27-L34,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L796-L833,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L826-L829,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L796-L833,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L27-L34",,,,,,
Unsatisfactory,validation-66,Unauthorized Withdrawal Vulnerability in `AbsBoldStakingPool` Contract AbsBoldStakingPool: Unauthorized Withdrawals from Staking Pool,,withdrawl Access Control,msg.sender linked should suffice,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L46-L48,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,,,,,,
Unsatisfactory,validation-314,`Address.isContract()` is not a reliable way of checking if the input is a contract,,isContract check,Incorrect assumption,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L16,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/StakingPoolCreatorUtils.sol#L16,,,,,,
Unsatisfactory,validation-68,Inconsistent Solidity Compiler Versions Across Contracts,,QA,Low QA frequently reported by bots,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBufferTypes.sol#L7,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBufferTypes.sol#L7,,,,,,
Unsatisfactory,validation-52,[H-10] `MerkleTreeLib` - Missing Claimable Addresses in Leaf Hashing (Insecure Claim Process) can lead to Unauthorized Access and Theft of Assets,Non-descript,merkle should include addr,MerkleTreeLib works well as intended,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L5-L366,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L5-L366,,,,,,
Unsatisfactory,validation-35,[M-1] `RollupAdminLogic::setOwner` - Lack of Two-Step Transfer Process for Critical Privileges (Missing Confirmation Step + Potential Unauthorized Ownership Changes),,2 step,Low QA frequently reported by bots,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol?plain=1#L195-L198,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol?plain=1#L195-L198,,,,,,
Unsatisfactory,validation-378,DelayBuffer.sol:: Unhandled Overflow in Buffer Calculation,,^0.8.0,The max integer of uint256 is an astronomical value,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L46,,,,,,
Unsatisfactory,validation-349,RollupAdminLogic does not have any access control,,logical contract func do not need access control,See #83,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L150-L329,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,,,,,,
Unsatisfactory,validation-270,"When assertion hash equals zero, anyone can cause loss of funds to all stakers",,"`_assertionHash` == 0
 pool creator's mistake",Low QA on zero value check,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L39-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L39-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L39-L46,,,,,,
Unsatisfactory,validation-294,Malicious party can escape from slashing even though they make malicious assertion,"If an assertion has a child, it has been confirmed",avoid losing if having child,Invalid assumptions,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L572-L573,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L195,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L195,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L572-L573",,,,,,
Unsatisfactory,validation-234,"If both child edges have rivals , bottom up timer will not tell correct time ","It evaluates both and increments the smallest, i.e. favouring failure","timer mechnism, result in smaller value
 relate to 338",Insufficient proof to support the described scenario,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L488-L496,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L502-L518",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L488-L496,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L488-L496,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L502-L518",,,,,,
Unsatisfactory,validation-181,Integer Overflow Vulnerability in `_setMaxTimeVariation()` Function.,,,Low QA,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L870-L877,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L870-L877,,,,,,
Unsatisfactory,validation-129,Timing Validation Vulnerability in setMaxTimeVariation Parameter,,value lower upper bound,Low QA on zero value check,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L244-L267,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L244-L267,,,,,,
Unsatisfactory,validation-227,ksHash Calculation in `setValidKeyset` Can Lead to Collisions.,Uniqueness reduced by 1 bit which is insignificant,,Insufficient proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L904-L905,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L904-L905,,,,,,
Unsatisfactory,validation-169,`formBlobDataHash()` normalized gas amount may not always work well with `submitBatchSpendingReport()`,"Should potentially round upwards, QA",4naly3er L-15,Insufficient proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L746,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L746,,,,,,
Unsatisfactory,validation-102,"Unauthorized users can submit batch spending reports and receive refunds, compromising the integrity of the `SequencerInbox` contract",,,Insufficient/incorrect proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L455-L510,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L455-L510,,,,,,
Unsatisfactory,validation-50,[M-5] `MerkleTreeLib::verifyInclusionProof` - Accepting Zero Hash as Root Hash (Improper Validation) can lead to Proof Fabrication by Attackers,No instance of zero input,"the hash used are either `startHistoryRoot` or `endHistoryRoot`, wont be 0 hash",Low QA on zero value check,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L359-L365,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L359-L365,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L359-L365,,,,,,
Unsatisfactory,validation-29,[H-2] `RollupProxy::initializeProxy` - Unprotected Initializer can lead to Unlimited Unauthorized Re-Initializations and Contract Manipulation,,proxy init access control,Typically taken care of via deployment script,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupProxy.sol?plain=1#L12-L13,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupProxy.sol?plain=1#L12-L13",,,,,,
Unsatisfactory,validation-381,Arbitrary Third-party Contract Calls,"Called at end and is on specific function signature, no flaw demonstrated",refund gas reenter,Insufficient proof to support the described scenario,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L366-L373,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L366-L373,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L366-L373,,,,,,
Unsatisfactory,validation-374,`firstChildBlock` value not set when first child assertion is created.,Created via childCreated function,miss to init `firstChildBlock`,Insufficient proof to support the described scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L76-L85,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L76-L106,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L76-L106,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L76-L106,,,,,,
Unsatisfactory,validation-331,Risk of excessive gas refunds due to lack of calldata size limits,Gas refunder responsible for this,gasRefunder.sol is out of scope,Insufficient proof to support the described scenario with a concrete example on gas theft,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L25,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L17,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L17,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L25",,,,,,
Unsatisfactory,validation-188,Incorrect Stake Refunds in `stakeOnNewAssertion()` Due to Potential Modifications in `requiredStake` Value,Cannot change?,,Insufficient proof to support the described scenario with a concrete example,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L291-L296,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L291-L296,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L291-L296,,,,,,
Unsatisfactory,validation-370,Theft of funds under in the Sequencer in the form of gas,Invalid at face value but can be combined with tx.origin bypass,"manipulate the calldata to steal gas refund
 gasRefunder.sol is out of scope",Insufficient proof to support the described scenario with a concrete example on gas theft,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L24,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L24,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L396,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L396,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/libraries/GasRefundEnabled.sol#L24",,,,,,
Unsatisfactory,validation-367,Insufficient Challenge Period Validation,QA,value lower upper bound,Low QA on limit checks,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L34,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L34,,,,,,
Unsatisfactory,validation-364,RollupAdminLogic : lack of access control for some of the critical functionality,,logical contract func do not need access control,See #83,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L195-L198,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,,,,,,
Unsatisfactory,validation-342,Lack of validation of parent assertion existence in `fastConfirmAssertion` function,,assertion existence check missing,Admins should be trusted,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L252-L262,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L252-L262,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L252-L262,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L252-L262,,,,,,
Unsatisfactory,validation-73,Inadequate Access Control on `setBaseStake` Function in `RollupAdminLogic`,,logical contract func do not need access control,See #83,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L223-L226,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,,,,,,
Unsatisfactory,validation-20,**Incorrect Usage of `safeTransferFrom` Function in `AbsBoldStakingPool` Contract**,,SafeERC20,Insufficient proof,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L8,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L8,,,,,,
Unsatisfactory,validation-42,[H-6] RollupAdminLogic - Improper Proxy Setup and Lack of Access Control can lead to attackers exploiting Critical Functions meant for admins through Unauthorized Access,,logical contract func do not need access control,See #83,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol?plain=1#L180-L226,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol?plain=1#L180-L226,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330",,,,,,
Unsatisfactory,validation-351,Protocol's deployment of new contracts is unsafe,CREATE2,"createPool uses const salt
 relate to 333",Insufficient proof to support the described scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L516,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L516-L519,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L516-L519,,,,,,
Unsatisfactory,validation-298,`RollupCreator` uses incorrect challenge period value,Inclined to believe this is a convention,"confirmPeriodBlocks and challengePeriodBlocks
 mis group",Insufficient proof to support the described scenario with a concrete example,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L101,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L101,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L101,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L101,,,,,,
Unsatisfactory,validation-179,Unhandled Edge Cases in `multiUpdateTimeCacheByChildren` Function.,,,Low QA on input validation,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L491-L496,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L491-L496,,,,,,
Unsatisfactory,validation-161,frontrunning a assertion creation by creating the first child make staker lose fund.,Funds not extracted by caller,"seems invalid
 `isFirstChild` check wont pass then no fund transferred",Insufficient proof to support the described scenario with a concrete example,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210,,,,,,
Unsatisfactory,validation-127,Vulnerability in Staker Index Handling in deleteStaker Function,,"no poc
 dup of 126",See #126,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L355-L363,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L198-L200,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L198-L200,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L355-L363",,,,,,
Unsatisfactory,validation-60,Incorrect Usage of `safeTransferFrom` and `safeTransfer` Functions in `ERC20Bridge` Contract,,SafeERC20,Insufficient proof,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/ERC20Bridge.sol#L50,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/ERC20Bridge.sol#L50,,,,,,
Unsatisfactory,validation-383,EdgeChallengeManager.sol:: Unprotected Staking Operations,Desirable,spammer has to stake fund,See #40 and #39,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L422-L435,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L371,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L371,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L422-L435",,,,,,
Unsatisfactory,validation-299,wrong implement of verifyPrefixProof,Must be less to ensure new entries introduced,"merkleTree `preSize ` and `postSize` can be equal
 lack detailed discussion about impact",Insufficient proof,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L323,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L323,,,,,,
Unsatisfactory,validation-249,Incorrect Handling of Maximum uint256 Value in mostSignificantBit Function,,,UintUtilsLib.mostSignificantBit works as intended,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/UintUtilsLib.sol#L32-L36,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/UintUtilsLib.sol#L32-L36,,,,,,
Unsatisfactory,validation-225,Setting the gas price to `0` will likely cause the transaction to be rejected or never mined.,,,The gas price is not set to zero.,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L818-L821,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L818-L821,,,,,,
Unsatisfactory,validation-192,Missing Initialization Parameter in SequencerInbox Contract: Risks and Consequences,constructor,,Insufficient/incorrect proof to support the described scenario,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L122,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L110-L114","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L122,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L110-L114",,,,,,
Unsatisfactory,validation-233,"genesisAssertionHash function may produce an incorrect hash value for the genesis assertion, which could potentially lead to inconsistencies in the system.",Genesis should be all zero,,Admin error of zero value initialization unlikely,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/AssertionState.sol#L11-L15,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/AssertionState.sol#L11-L15,,,,,,
Unsatisfactory,validation-51,[H-9] `MerkleTreeLib::verifyInclusionProof ` - Lack of Check for Duplicate Proofs Within Merkle Tree (Missing Uniqueness Checks) can lead to Double-Spending by Attackers,,lack detailed POC,Sanity check as in #50,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L110-L140,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L359-L365,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L359-L365,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol?plain=1#L110-L140",,,,,,
Unsatisfactory,validation-13,Missing Implementation for Pool Existence Check,,,Low QA frequently reported by bots,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/interfaces/IEdgeStakingPoolCreator.sol#L24,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/interfaces/IEdgeStakingPoolCreator.sol#L24,,,,,,
Unsatisfactory,validation-240,Unvalidated Assignment of `_validatorWalletCreator` Parameter.,,,Low QA frequently reported by bots,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L70-L79,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L70-L79","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L70-L79,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L70-L79",,,,,,
Unsatisfactory,validation-122,The upgradeSequencerInbox function might revert if postUpgradeInit is called when the buffer configuration has already been initialized,"Perhaps vald, should return instead of reverting",no loss,Low QA requiring mess up from admin controlled calls,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L168-L172,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L440,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L440,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L168-L172",,,,,,
Unsatisfactory,validation-34,Users whose stakes were used to create the pool move can exit the pool with the excess stakes of other users by frontrunning them.,"Expected, excess stakes should not be deposited",flawed mechanism about excess stake handling,Insufficient/incorrect proof to support the described scenario,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L45-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L50,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L45-L54,,,,,,
Unsatisfactory,validation-332,makeStakeWithdrawable()  of assertionStaking.sol Is Impossible to be called,,"msg.sender is the pool, onlyValidator may revert
 mis group
 but the admin can set the pool as validator",Insufficient proof to support the described scenario with a concrete example,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L49-L52,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L49,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L49,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L49-L52,,,,,,
Unsatisfactory,validation-273,`forceRefundStaker` implementation is incomplete,,new RollupAdminLogic miss `deleteStaker()`,Insufficient proof to support the described scenario with a concrete example,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L228-L235,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L228-L235,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L228-L235,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L228-L235,,,,,,
Unsatisfactory,validation-242,Incorrect Initialization of Executors Array in `UpgradeExecutor` Contract,,,Insufficient proof to support the described scenario with a concrete example,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L280-L281,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L280-L281,,,,,,
Unsatisfactory,validation-215,Validators can delay on-chain confirmation of assertions.,"A challenge period is 6.4 days, so confirmations are meant to occur within 12.8 days which 8.8 days is below of",last day validation delay the whole confirmation,Intended design. Low QA,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L82-L131,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L130,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L82-L131,,,,,,
Unsatisfactory,validation-345,The requiredStake on stakeOnNewAssertion is directed by the previous assertion and not a base value,,"requiredStake mechanism, seems by design",Insufficient proof to support the described scenario with a concrete example,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L371-L373,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L371-L373,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L371-L373,,,,,,
Unsatisfactory,validation-313,An attacker can use conflicting assertions / edges strategy to delay the assertions,Economically unviable,"delay assertion
 need to double check POC",BoLD has been designed to handle the described scenario,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L371,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/Assertion.sol#L70",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L371,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L371,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/Assertion.sol#L70",,,,,,
Unsatisfactory,validation-189,Non-Atomic State Changes in `withdrawStakerFunds` Due to Premature Execution of `withdrawFunds()`,It does not,,Insufficient/incorrect proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358-L364,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358-L364,,,,,,
Unsatisfactory,validation-186,Zero Deposit Vulnerability in `_newStake Function` Allows Creation of Invalid Staker Records.,Stake is equal to assertion stake which should be non-zero,,Insufficient/incorrect proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L139,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L139,,,,,,
Unsatisfactory,validation-92,[H-1]  Access Control Vulnerability in BridgeCreator Contract that leads to create new bridge contracts.,"I am not sure if bridges should require ACL, will revisit, should not require ACL",access control createBrige,Insufficient proof. The contract is simply a creator,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L99,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L99,,,,,,
Unsatisfactory,validation-247,Insecure Use of Assert in MerkleTreeLib.sol:verifyPrefixProof Function,,,Low QA,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L340,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L312-L350","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L340,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L312-L350",,,,,,
Unsatisfactory,validation-244,Missing Approval Check for ERC-20 Token Transfers in `_deployFactories` Function,,,Approval is typically done right before the call e.g. when caller is authenticating through the wallet,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L306-L316,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L306-L316,,,,,,
Unsatisfactory,validation-10,Deposit failure due to WETH transfer incompatibility on some chains,,logical contract func do not need access control,Mitigation won't work,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L29-L38,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L29-L38,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330",,,,,,
Unsatisfactory,validation-271,"After Fork, RollupOwner cannot override some values ",Desirable as its emergency scenario?,"admin cannot control the delay after fork, `removeDelayAfterFork`
 seems by design",Insufficient proof to support the described scenario with a concrete example,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L235-L242,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L62-L66",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L235-L242,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L235-L242,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L62-L66",,,,,,
Unsatisfactory,validation-232,Inaccurate Tracking of Total Withdrawable Funds.,Malicious,,Insufficient/incorrect proof to support the described scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L331-L337,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L343-L349,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L343-L349,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L331-L337",,,,,,
Unsatisfactory,validation-209,`forceInclusion` Can Include Messages Too Early.,A non-zero delay is enforced regardless of the buffer,,See #49 and #151,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L287,,,,,,
Unsatisfactory,validation-187,Unfair Stake Forfeiture in `stakeOnNewAssertion` Function Due to Misidentification of 'Losing' Assertions.,,,Code logic works as intended,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L217,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L210-L217,,,,,,
Unsatisfactory,validation-144,User can loss all the money that he put into a AssertionStakingPool contract,"Probably true, should permit users with at least a proportion staked?","wrong hash can guarantee staker's loss
 but it's staker's own choice to assert",That's not how BoLD works,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,,,,,,
Unsatisfactory,validation-5,Potential Vulnerabilities when implementing possibly legacy code [openzeppelin],,isContract check,See #314,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L9,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L9,,,,,,
Unsatisfactory,validation-307,`whenNotPaused` modifier is not properly implemented for Withdrawals in BOLD `rollup`,Invalid recommendation but perhaps has some merit,inconsistent withdraw and pause rule,Suggested mitigation will break the intended whenNotPaused,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L229-L230,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L361-L362,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L229-L230,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L229-L230,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L361-L362,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L358",,,,,,
Unsatisfactory,validation-223,formBlobDataHash Miscalculates Gas Cost.,,,Inadequate/incorrect proof to substantiate the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L742,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L742,,,,,,
Unsatisfactory,validation-33,[H-5] `EdgeChallengeManager::createLayerZeroEdge` - Insufficient Input Validation can lead to Denial of Service,Generic,merkle size too large gas DOS,Low QA on input validation,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L371-L488,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L371-L488,,,,,,
Unsatisfactory,validation-248,Duplicate Validators in setValidator Function Call May Lead to Unexpected Behavior or Security Issues,No misbehaviour,,Low QA on input validation,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L526-L533,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L526-L533,,,,,,
Unsatisfactory,validation-241,Incorrect Initialization of `_stakeAmounts` Array in `ChallengeManager` Contract,,,Low QA on input validation,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L99-L107,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L99-L107,,,,,,
Unsatisfactory,validation-224,L1 Gas Fees Not Properly Handled When Host Chain is Arbitrum.,Divided to illustrate gas units rather than gas cost,,Inadequate/incorrect proof to substantiate the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L768-L772,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L768-L772,,,,,,
Unsatisfactory,validation-213,Pess-Strange-Setter in the setBufferConfig Function,,,Inadequate/incorrect proof to substantiate the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L947-L950,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L947-L950,,,,,,
Unsatisfactory,validation-246,Incorrect Calculation of `postSize` in MerkleTreeLib.sol:appendCompleteSubTree Function,,,MerkleTreeLib.sol:appendCompleteSubTree works as intended,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L173-L174,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L173-L174,,,,,,
Unsatisfactory,validation-210,`addSequencerL2BatchFromOrigin` Can Accept Batches Without Proof.,,,Inadequate/impractical proof to substantiate the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L377-L386,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L377-L386,,,,,,
Unsatisfactory,validation-32,"Discrepancies and Compatibility Issue with `SafeERC20` Functions in `EdgeChallengeManager.sol` [see `EdgeChallengeManager.refundStake(bytes32 edgeId)`, `EdgeChallengeManager.createLayerZeroEdge(args)` in `EdgeStakingPool.sol`] ",,SafeERC20,Insufficient proof,,,https://github.com/code-423n4/openzeppelin-contracts/blob/main/contracts/token/ERC20/utils/SafeERC20.sol#L36,https://github.com/code-423n4/openzeppelin-contracts/blob/main/contracts/token/ERC20/utils/SafeERC20.sol#L36,,,,,,
Unsatisfactory,validation-357,RollupAdminLogic : incorrect `minimumAssertionPeriod` when the contract is created.,,,"See #40 and #39. Also, see #83 on access control",,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L51-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L51-L54,,,,,,
Unsatisfactory,validation-114,refundStake involve transferring tokens (st.safeTransfer) to edge.staker,,reenter safetransfer,See #348,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L571-L586,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L571C1-L586C1,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L571-L586,,,,,,
Unsatisfactory,validation-206,`SequencerInbox` Vulnerable to Misimplemented nativeToken.,Decoding will result in failure,,Insufficient proof to support the described scenario with a concrete example,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L187-L192,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L187-L192,,,,,,
Unsatisfactory,validation-229,Underflow in reduceStakeTo Can Lead to Excessive Withdrawals,,,Issue is invalid. There's already a require check.,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L305,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L305,,,,,,
Unsatisfactory,validation-148,User can loss all the money that he put into a EdgeStakingPool contract,Somewhat related to validation-144,"wrong hash can guarantee staker's loss
 but it's staker's own choice to assert",See #144,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44-L51,,,,,,
Unsatisfactory,validation-336,An incorrect edge can be confirmed by a malicious party which breaks a core invariant in BoLD,"This is invalid, as the assertion that the malicious user created is the one the fast actor intended and simply confirms it","fast confirmation
 
 mis group",That's not how BoLD works,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L723,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L723,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L723,,,,,,
Unsatisfactory,validation-324,`_pause`/`_unpause` Functionality Not Implemented in `RollupUserLogic`,Admin logic implements it,RollupUserLogic miss `pause()` impl,Insufficient proof to support the described scenario,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L1,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L15,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L15,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L1",,,,,,
Unsatisfactory,validation-191,Initialization Oversight in `TransparentUpgradeableProxy` Deployment: Risks and Consequences.,,,Insufficient proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L69-L71,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BridgeCreator.sol#L69-L71,,,,,,
Unsatisfactory,validation-153,`safeIncreaseAllowance` could fail if USDT is used as `stakeToken`,,fee on transfer is not supported,Known issue from readme,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPool.sol#L44,,,,,,
Unsatisfactory,validation-355,"Insufficient Access Control , Potential Unauthorized Access",,logical contract func do not need access control,See #83,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L180-L188,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,,,,,,
Unsatisfactory,validation-341,"RollupUserLogic does not expose the Pausable functionality, rendering the functions unable to be paused",,RollupUserLogic miss `pause()` impl,Insufficient proof to support the described scenario,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L1,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L15-L21,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L15-L21,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L1",,,,,,
Unsatisfactory,validation-266,Lack of Access Control on Critical Functions,,logical contract func do not need access control,See #83,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L117-L330,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L15C1-L302C6,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L15-L330,,,,,,
Unsatisfactory,validation-250,Reentrancy Vulnerability in depositIntoPool and withdrawFromPool Functions,,,See #348,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L34-L35,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L34-L35,,,,,,
Unsatisfactory,validation-222,`isDelayProofRequired` Can Miss New Delayed Messages,,,Inadequate/incorrect proof to substantiate the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L628-L635,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L628-L635,,,,,,
Unsatisfactory,validation-54,[H-11] `RollupUserLogic` - Attackers can Exploit Low Gas Fees to Execute Many Transactions and can lead to DoS and Resource Exhaustion,,,See #40 and #39,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L5-L369,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol?plain=1#L5-L369,,,,,,
Unsatisfactory,validation-163,old staker may lose their bond if other staker confirm assertions.,They will have a child in that case,"multiple stakers create and confirm different assertion, old staker lose bond
 
 relate to 145
 
 mis group",That's not how BoLD works,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L571,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L307,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L307,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L571",,,,,,
Unsatisfactory,validation-231,Underflow in withdrawFunds Can Lead to Incorrect State,,,Solidity will revert automatically in version ^0.8.0,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L331-L337,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L331-L337,,,,,,
Unsatisfactory,validation-264,Imprecise management of stakers allowance can lead to loss of funds,,centralization,Admins are indeed trusted,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,,,,,,
Unsatisfactory,validation-208,Uninitialized Variable in `getTimeBounds` Can Lead to Errors.,Expected,,Insufficient/incorrect proof to support the described scenario,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L228-L230,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L216-L233","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L228-L230,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L216-L233",,,,,,
Unsatisfactory,validation-24,`verifyInclusionProof()` vulnerable to forgery via proofs of incorrect lengths,,"misunderstanding of merkle process, no POC",Low QA on input validation,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src%2FchallengeV2%2Flibraries%2FMerkleTreeLib.sol#L359-L365,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src%2FchallengeV2%2Flibraries%2FMerkleTreeLib.sol#L359-L365,,,,,,
Unsatisfactory,validation-219,Unrestricted Access to Critical Functions in ERC20Mock Contract,,out of scope,ERC20Mock Contract is out of scope,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/test/ERC20Mock.sol#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/test/ERC20Mock.sol#L16,,,,,,
Unsatisfactory,validation-164,change of validatorWhitelistDisabled can make staker not withdraw their bond.,,"toggle validatorWhitelistDisabled lock fund
 mis group",Insufficient proof to support the described scenario,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L20-L23,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L241,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L241,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L20-L23",,,,,,
Unsatisfactory,validation-346,AssertionStakingPool : createAssertion - user unable to withdraw their funds due to incorrect withdrawal address while creating the assertion.,withdrawn funds go to staking pool,"`withdrawalAddress` should be staker, not `address(this)`
 seems invalid",Inadequate proof alleging the flaw,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L39-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L39-L46,,,,,,
Unsatisfactory,validation-274,Unauthorized Caller can Create Layer Zero Edge,,invalid the if && check is right,Seems valid although the comment implies whielist is always enforced,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L376,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L376,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L376,,,,,,
Unsatisfactory,validation-136,Upgrade action will fail because of the challange manager initialize interface mismatch,,"not missing, but different order","Named parameters allow any order, no parameters missing",,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L503,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L503,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L503,,,,,,
Unsatisfactory,validation-61,Incorrect Implementation of `SafeERC20` Functions in `RollupUserLogic.sol`,,SafeERC20,Insufficient proof,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L215,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L215,,,,,,
Unsatisfactory,validation-196,Error setting the owner in the rollup Admin contract in `perform` function in the BOLDUpgradeAction contract.,,wrong value,Logic works as intended,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L521-L538,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L538,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L521-L538,,,,,,
Unsatisfactory,validation-12,Potential Signature replay in `StateHashPreImageLookup` contract,,dup of 167,Insufficient proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L107,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L107,,,,,,
Unsatisfactory,validation-142,Potential reentrancy issue in `withdrawStakerFunds` function,,reenter,See #348,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L356C1-L364C6,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L356C1-L364C6,,,,,,
Unsatisfactory,validation-103,Uninitialised Local Variable in Memory,,,Low QA at best,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/Assertion.sol#L74,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/Assertion.sol#L74,,,,,,
Unsatisfactory,validation-109,Reetrancy Pattern : 3 occurences,,reenter,See #348,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/AbsOutbox.sol#L196-L225,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/AbsOutbox.sol#L196-L225,,,,,,
Unsatisfactory,validation-90,Downcasting nextInboxPosition variable from uint256 to unit64 will truncate all the message hash above 2^64 that cause an discrepancy among the new message hash.,"not a hash, a sequentially incremented variable",4naly3er L-19,Insufficient proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L495,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L495,,,,,,
Unsatisfactory,validation-217,RollupUserLogic.sol in intended to be pausable but cannot be paused/unpaused.,Admin facet takes care of this,RollupUserLogic miss `pause()` impl,Insufficient proof to support the described scenario,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L1,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L22,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L22,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L1",,,,,,
Unsatisfactory,validation-184,Incorrect Validator AFK Status Logic in `_validatorIsAfk()` Function.,,,Issue doesn't make sense. a < b is equivalent to b > a,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L56-L58,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L56-L58,,,,,,
Unsatisfactory,validation-302,Eligible stakers cannot create new assertions,"When the _stakerMap is populated, the latest confirmed assertion is set","lastAssertion
 mis grouped",See #294,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L194,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L190-L199,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L190-L199,,,,,,
Unsatisfactory,validation-265,Use of `tx.origin` Over `msg.sender` in SequencerInbox Contract,,no detailed impact,See #102,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L764,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L764,,,,,,
Unsatisfactory,validation-207,`updateRollup` May Not Update Rollup Address Correctly.,,,Insufficient/incorrect proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L208-L214,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L208-L214,,,,,,
Unsatisfactory,validation-190,Infinite Loop in `assertionHash` Function Leading to Denial of Service (DoS) and Integrity Risks.,,,There isn't an infinite loop.,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupLib.sol#L29-L34,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupLib.sol#L29-L34,,,,,,
Unsatisfactory,validation-325,"afterGS.getInboxPosition() has a range of valid values, rather than a singular valid value, allowing multiple valid sibling assertions to be created.","Discrepancy of documentation, as the full amount may not be consumed due to block gas limit",not comply with doc spec,Insufficient proof to support the described scenario,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L425-L427,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L425,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L425-L427,,,,,,
Unsatisfactory,validation-245,Incorrect Calculation of Merkle Root in MerkleTreeLib.sol:root Function,Code seems to be using the function responsibly,,See #87,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L110-L140,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L110-L140,,,,,,
Unsatisfactory,validation-204,`calcBuffer` Can Lead to Incorrect Delay Buffer Calculations.,,,See #4,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L48-L51,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L48-L51,,,,,,
Unsatisfactory,validation-376,there is an i ncorrect Handling of Validator AFK Check in _validatorIsAfk,,,Insufficient proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L56-L60,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L56-L60,,,,,,
Unsatisfactory,validation-251,Integer Overflow Vulnerability in RollupAdminLogic.sol,,,Built-in solidity safemath already prevents this,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L71-L75,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L76-L85","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L71-L75,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupAdminLogic.sol#L76-L85",,,,,,
Unsatisfactory,validation-146,Token can be stuck in the AssertionStakingPool,Related to validation-144 and validation-148,"frontrun can go 2 way, the other party can do the same",Intended design. Expected scenario,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L39-L46,https://github.com/code-423n4/bold/blob/main/contracts/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L55,"https://github.com/code-423n4/bold/blob/main/contracts/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L39-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L55",,,,,,
Unsatisfactory,validation-154,Unprotected initializer functions in `EdgeChallengeManager` and `RollupProxy` allow unauthorized initialization,,logic contract access control,Typically taken care of via deployment script,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L305-L316,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/IRollupAdmin.sol?plain=1#L16,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L177,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol?plain=1#L34-L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L305-L316",,,,,,
Unsatisfactory,validation-139,makeStakeWithdrawable function can be invoked to withdraw active stake,,"create new child assertion to withdraw
 similar to 338",Insufficient/incorrect proof to support the described scenario,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L49,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L49,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L49,,,,,,
Unsatisfactory,validation-359,Lack of Event Emission for Critical State Changes,QA but barely NC,lack event,QA at best,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L62-L76,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L252-L261","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L62-L76,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L252-L261",,,,,,
Unsatisfactory,validation-269,The users will not be able to get refund of their stake for the levels lower than block level,I do not think refunds should be performed for unconfirmed edges,lower level edges can not be Confirmed,Insufficient/incorrect proof to support the described scenario,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L731,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L741",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L731,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L731,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L741",,,,,,
Unsatisfactory,validation-218,Invalid Use of calldata in Internal Function Parameters,,,Low QA frequently reported by bots,,,https://github.com/code-423n4/bold/blob/main/contracts/src/rollup/RollupCore.sol#L236-L241,https://github.com/code-423n4/bold/blob/main/contracts/src/rollup/RollupCore.sol#L236-L241,,,,,,
Unsatisfactory,validation-354,A pool collision attack can be used to steal funds meant for assertions,,addr collision,See #115,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L19","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L19",,,,,,
Unsatisfactory,validation-140,fastConfirmNewAssertion in RollupUserLogic missing access control,,"logical contract func do not need access control, Rollup user",See #83,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L273,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L273,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L273,,,,,,
Unsatisfactory,validation-228,The order of operations when updating the `sendRoot` in the outbox contract and updating the internal state of the contract could lead to race condition.,,,Insufficient/incorrect proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L236-L267,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L236-L267,,,,,,
Unsatisfactory,validation-157,Replay Attack in SequencerInbox.sol,,add nonce to sequencer,Insufficient proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L560,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L560,,,,,,
Unsatisfactory,validation-137,Create new rollup will fail because of the challange manager initialize interface mismatch,,"not missing, but different order",See #136,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L305,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L85,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCreator.sol#L85,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L305",,,,,,
Unsatisfactory,validation-334,Assertion Timing can be manipulate in confirmEdgeByTime Function,Desirable,,Low QA on verification check,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L521-L533,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L521-L533,,,,,,
Unsatisfactory,validation-97,Unauthenticated user manipulate the `totalDelayedMessagesRead` value,,no detailed POC,Insufficient proof,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L791,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L809-L816","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L791,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L809-L816",,,,,,
Unsatisfactory,validation-87,Forgery Attack on Unbalanced Merkle Trees,Usage of library is cautious throughout contract,"unbalanced Merkle tree, seems there is already some balance check",See #50 and #51,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L110,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L110,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/MerkleTreeLib.sol#L110,,,,,,
Unsatisfactory,validation-309,Transferring tokens will reverts on Arbitrum when `stakeToken` is `WETH`,,WETH9 impl on arbitrum,See #10,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L35,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L434,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L366-L368",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L35,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L35,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L434,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L366-L368",,,,,,
Unsatisfactory,validation-86,reentrancy attack during withdrawFromPool in AbsBoldStakingPool contract,,reenter,See #82,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41,,,,,,
Unsatisfactory,validation-165,Edge can be confirmed too soon and leaves no time to challenge the edge.,,"need grace period
 mis group",BoLD has been designed to work as suggested by the mitigation,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L533,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L537",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L533,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L533,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/libraries/EdgeChallengeManagerLib.sol#L537",,,,,,
Unsatisfactory,validation-195,The perform function in the BOLDUpgradeAction contract can be griefing by front-running the RollupProxy deploymen with same `salt` param,,"then `perform()` is called, as expected","deterministic salt, allowing potential front-running of the RollupProxy deployment",,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L516,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L516,,,,,,
Unsatisfactory,validation-145,Early staker can withdraw the fund from the users that stakes later,Desirable,"staker that stake later after the assertion is created but not resolved yet
 
 EdgeStakingPool has this issue as well
 
 relate to 163
 
 mis group",That's not how BoLD works,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L60-L63",https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L29,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L60-L63,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L29",,,,,,
Unsatisfactory,validation-183,Unhandled Assertion Status Values in `createAssertion()` Function.,,,Low QAon validation check,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/Assertion.sol#L70-L80,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/Assertion.sol#L70-L80,,,,,,
Unsatisfactory,validation-214,Unauthorized Whitelist Disabling in the contract,,,See #83,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L61-L77,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L61-L77,,,,,,
Unsatisfactory,validation-300,"Rouge oracle can be manipulated to affect the validity of assertions, potentially leading to ""wrong assertions"" to be confirmed ",,irrelevant,Instances entailed are out of scope (No links provided),,,,,,,,,,
Unsatisfactory,validation-199,"If the newly created lower child edge is not properly tracked and its existence is not recorded, it can lead to data loss. BisectEdge Missing EdgeAdded Event for New Child Edge (EdgeId 0).",ID of 0 unlikely due to hash,,Inadequate/impractical proof to substantiate the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L458,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L458,,,,,,
Unsatisfactory,validation-152,Lack of input validation in assertion pool allows malicious user to create a clearly invalid insertion to make staker lose fund.,dupe of validation-144,"wrong hash can guarantee staker's loss
 but it's staker's own choice to assert",See #144,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L34,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L34,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L40-L46",,,,,,
Unsatisfactory,validation-82,withdraw()' function of the VulnerableContract is susceptible to reentrancy attacks due to the order of operations,,reenter,Coded POC inconcrete,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L286C1-L353C6,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L286C1-L353C6,,,,,,
Unsatisfactory,validation-203,`refundStake` Fails with Non-ERC20 StakeToken.,,,Low QA commonly reported by the bots,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L572-L585,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L572-L585,,,,,,
Unsatisfactory,validation-75,Inadequate Access Control on `perform` Function in `DeployHelper`,,,Out of Scope Contract,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/DeployHelper.sol#L89-L133,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/DeployHelper.sol#L89-L133,,,,,,
Unsatisfactory,validation-115,CREATE2 address collision during pool deployment allows for complete draining of the pool before the assertion is created on the Rollup contract,"Unrealistic, much higher incentives to generate a contract for the `0` address via the same technique (i.e. brute-forcing the address)",addr collision,Well elaborated POC,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L19","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/EdgeStakingPoolCreator.sol#L19,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPoolCreator.sol#L19",,,,,,
Unsatisfactory,validation-99,Consuming staking pool fund maliciously if expected `assertionHash` in assertion staking pool is set to zero,,"`_assertionHash` == 0
 pool creator's mistake",Low QA on zero value check,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L39-L46,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L45,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AssertionStakingPool.sol#L39-L46,,,,,,
Unsatisfactory,validation-362,Incorrect equality in the functions called getKeysetCreationBlock and packHeader function,,,Suggested mitigation isn't any better than the current check,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L957-L961,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L957-L961,,,,,,
Unsatisfactory,validation-205,"The contract will revert in scenarios where it should not, and vice versa, potentially allowing invalid or malicious inputs to be accepted.",Refunds should not occur on Arbitrum and should occur on other chains?,,Intended behaviour,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L147-L151,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L147-L151,,,,,,
Unsatisfactory,validation-202,`confirmEdgeByOneStepProof` Fails with Invalid Bridge Type.,,,Invalid bridge type in ExecutionContext causes function failure,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L550-L566,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L550-L566,,,,,,
Unsatisfactory,validation-198,Incorrect Recipient Address for Staking Amount in `EdgeChallengeManager`,Basically same check in opposite direction,,Inadequate/impractical proof to substantiate the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L433,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L433,,,,,,
Unsatisfactory,validation-167,The config for the new upgrade can be mess up by an attacker in BOLDUpgradeAction contract,pre-image cannot be manipulated,"anyone can add data to hashset, but the added data won't be used to cause loss",Could be deemed high if the lack of access control in the set function is valid,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L370,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/BOLDUpgradeAction.sol#L370,,,,,,
Unsatisfactory,validation-123,Access Control in AbsBoldStakingPool.sol,,withdrawl Access Control,msg.sender linked should suffice,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L41-L54,,,,,,
Unsatisfactory,validation-230,Adding the `initialStaked` amount to the withdrawable funds would result in an incorrect balance.,initial staked is not literal,,Inadequate/incorrect proof to substantiate the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L317-L324,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupCore.sol#L317-L324,,,,,,
Unsatisfactory,validation-185,Premature Assertion Confirmation Due to Insufficient Challenge Grace Period Enforcement,"an unchallenged assertion has a confirm period, a challenged assertion has a grace period",,Insufficient proof to support the described scenario,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L125-L127,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/rollup/RollupUserLogic.sol#L125-L127,,,,,,
Unsatisfactory,validation-366,Dubious typecast in the following functions update function and calcPendingBuffer function,,,calcBuffer will not overflow since inputs are all uint64. unrealistic for block.timestamp to reach higher than uint64,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L68-L75,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L82-L100","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L68-L75,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L82-L100",,,,,,
Unsatisfactory,validation-197,Inconsistent Length Assumption in `EdgeChallengeManager`,,,Low QA on input validation,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L360-L362,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L360-L362,,,,,,
Unsatisfactory,validation-216,Re-entrancy Event in the refundStake function where refund can be incorrectly doubled because emit event comes after safeTransfer when it should be before,,,QA,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L572-L585,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L572-L585,,,,,,
Unsatisfactory,validation-201,Unverified `prevAssertionHash` Leads to Inaccurate Edge Confirmation Time.,Interesting,,Low QA on verification check,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L511-L536,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L522-L531,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L511-L536,,,,,,
Unsatisfactory,validation-105,Reentrancy Events Emitted withdrawFromPool function,,,Should be QA,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L29-L54,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/assertionStakingPool/AbsBoldStakingPool.sol#L29-L54,,,,,,
Unsatisfactory,validation-256,Unchecked transfer in the createLayerZeroEdge function in EdgeChallengeManager contract using IERC20.safeTransferFrom as the function does not have a modifier,,,Line 376 already checks if msg.sender is validator,,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L370-L448,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/challengeV2/EdgeChallengeManager.sol#L370-L448,,,,,,
Unsatisfactory,validation-162,A malicious user can misconfigure the buffer.,value is validated and not arbitrary,input `l1BlockAndTime` could be arbitrary,See #4,,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L310,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L33,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/DelayBuffer.sol#L33,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L310",,,,,,
Unsatisfactory,validation-373,Dubious typecast in the following functions getTimeBounds & setValidKeyset & _setBufferConfig & submiteBatchSpendingReport & _setMaxTimeVariation & formCallDataHash & packHeader functions,,,Instances are invalid,,,"https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L216-L233,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L903-L919,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L847-L865,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L755-L789,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L867-L882,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L688-L718,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L637-L653","https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L216-L233,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L903-L919,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L847-L865,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L755-L789,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L867-L882,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L688-L718,https://github.com/code-423n4/2024-05-arbitrum-foundation/blob/main/src/bridge/SequencerInbox.sol#L637-L653",,,,,,